name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "18"

jobs:
  # ‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check TypeScript types
        run: npx tsc --noEmit

      - name: Format check
        run: |
          if ! npx prettier --check .; then
            echo "Code formatting issues found. Run 'npm run format' to fix."
            exit 1
          fi

  # ÊµãËØï
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint-and-format

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:ci
        env:
          CI: true

      - name: Generate test coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: true

  # ÊûÑÂª∫ÊµãËØï
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          APP_PASSWORD: "test-password"
          JWT_SECRET: "test-jwt-secret"
          NODE_ENV: "production"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next/
          retention-days: 7

  # ÂÆâÂÖ®Êâ´Êèè
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-format

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level high

      - name: Run dependency check
        uses: ossf/scorecard-action@v2
        with:
          results_file: results.sarif
          results_format: sarif
          repo_token: ${{ secrets.GITHUB_TOKEN }}

  # E2E ÊµãËØïÔºà‰ªÖÂú® main ÂàÜÊîØÔºâ
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .next/

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          APP_PASSWORD: "test-password"
          JWT_SECRET: "test-jwt-secret"
          BASE_URL: "http://localhost:3000"

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-report
          path: playwright-report/
          retention-days: 30

  # ÊÄßËÉΩÊµãËØï
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .next/

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Ëá™Âä®ÈÉ®ÁΩ≤Âà∞ VercelÔºà‰ªÖ main ÂàÜÊîØÔºâ
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build, test, security]
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Comment deployment URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚úÖ Deployment successful! üöÄ\n\nCheck the live application: https://dropit.vercel.app'
            })

  # ÈÄöÁü•
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [build, test, security]
    if: always()

    steps:
      - name: Notify Slack on Success
        if: needs.build.result == 'success' && needs.test.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: "#dropit-ci"
          text: "‚úÖ CI Pipeline completed successfully!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: needs.build.result == 'failure' || needs.test.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: "#dropit-ci"
          text: "‚ùå CI Pipeline failed!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
